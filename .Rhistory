# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = factor(month)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = factor(month))) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
View(ufo)
View(ufo2)
mutate(ufo2, month=as.factor(month))
View(ufo2)
View(ufo2)
View(ufo2)
mutate(ufo2, month=as.numeric(month))
ufo2 <- mutate(ufo2, month=as.numeric(month))
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
ufo2 <- mutate(ufo2, month=as.numeric(month))
month_names <- c("January", "February", "March", "April", "May", "June", "July",
"August", "September", "October", "November", "December")
ufo2$month_name <- month_names[ufo2$month]
View(ufo2)
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month_name)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
ufo2 <- mutate(ufo2, month=as.numeric(month))
month_names <- c("01", "02", "03", "04", "05", "06", "07",
"08", "09", "10", "11", "12")
ufo2$month_name <- month_names[ufo2$month]
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month_name)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
ufo2 <- ufo %>%
separate(datetime, into = c("month", "day","year"), sep="/") %>%
separate(year, into = c("year", "time"), sep = " ") %>%
select(-duration_hours_min, -comments, -date_posted) %>%
filter(country=="us", latitude!=0, longitude!=0,  !is.na(latitude), !is.na(longitude)) %>%
mutate(year=as.factor(year)) %>%
mutate(latitude=as.numeric(latitude)) %>%
mutate(longitude=as.numeric(longitude)) %>%
mutate(shape=as.factor(shape)) %>%
mutate(state=as.factor(state))
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
ufo2 <- mutate(ufo2, month=as.numeric(month))
month_order <- c("01", "02", "03", "04", "05", "06", "07",
"08", "09", "10", "11", "12")
ufo2$month_index <- month_order[ufo2$month]
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month_index)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
runApp('ufo_shinyapp.R')
runApp('ufo_shinyapp.R')
runApp('ufo_shinyapp.R')
knitr::opts_chunk$set(echo = TRUE)
#install.packages("paletteer")
library("tidyverse")
library("naniar")
library("janitor")
library("ggmap")
library("dplyr")
ufo <- readr::read_csv("ufo_data/complete.csv", na = c("", "unkown")) %>% clean_names
glimpse(ufo)
summary(ufo)
ufo2 <- ufo %>%
separate(datetime, into = c("month", "day","year"), sep="/") %>%
separate(year, into = c("year", "time"), sep = " ") %>%
select(-duration_hours_min, -comments, -date_posted) %>%
filter(country=="us", latitude!=0, longitude!=0,  !is.na(latitude), !is.na(longitude)) %>%
mutate(year=as.factor(year)) %>%
mutate(latitude=as.numeric(latitude)) %>%
mutate(longitude=as.numeric(longitude)) %>%
mutate(shape=as.factor(shape)) %>%
mutate(state=as.factor(state))
register_stadiamaps("aff428bd-8ad7-4b69-8b6b-b34301483ba9", write = FALSE)
ufo2 %>%
select(latitude, longitude) %>%
summary()
latitude <- c(17.97, 70.67)
longitude <- c(-176.66, -65.83)
alien_bbox <- make_bbox(longitude, latitude, f = 0.03)
alien_map <-  get_stadiamap(alien_bbox, maptype = "stamen_terrain", zoom=5)
ggmap(alien_map)
ggmap(alien_map) +
geom_point(data = ufo2, aes(longitude, latitude), size=0.1) +
labs(x= "Longitude", y= "Latitude", title="UFO Sightings in the U.S. (1910 - 2014)")
ggplot(ufo2, aes(x = longitude, y = latitude)) +
geom_tile(stat = "density2d", aes(fill = ..density..), color = "white") +
scale_fill_viridis_c() +  # Choose a color scale
labs(title = "Heatmap of UFO Sightings in the U.S. (1910 - 2014)", x = "Longitude", y = "Latitude",
fill = "Density") +
theme_minimal()
str(ufo2)
ufo2 %>%
group_by(year) %>%
summarise(sightings = n()) %>%
arrange(desc(sightings))
sightings_summary <- ufo2 %>%
filter(!is.na(year)) %>%
group_by(year) %>%
summarise(sightings = n())
sightings_summary$sightings <- as.numeric(sightings_summary$sightings)
ggplot(sightings_summary, aes(x = year, y = sightings, group = 1))+
geom_point(size = 1)+
geom_path(color = "blue")+
labs(title = "Yearly UFO Sightings in the U.S. (1910-2014)",
x= "Year",
y = "Number of Sightings")+
scale_x_discrete(breaks = seq(1910,2014, by = 3))+
theme_minimal()+
theme(axis.text.x=element_text(size= 7.5,angle=70, hjust=1))
ufo2 %>%
group_by(state) %>%
summarise(sightings = n()) %>%
arrange(desc(sightings))
ufo2 %>%
group_by(state) %>%
summarise(sightings = n()) %>%
arrange(desc(sightings)) %>%
ggplot(aes(x = state, y = sightings))+
geom_col(fill = "blue")+
labs(title = "Total Recorded UFO Sightings by State (1910 - 2014)",
x = "State",
y= "Number of Sightings")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ufo2 %>%
filter(!is.na(shape), shape != 'unknown') %>% #added this to remove the 'unknowns' in this column that evaded being assigned NA
group_by(shape) %>%
summarise(sightings = n()) %>%
arrange(desc(sightings))
ufo2 %>%
filter(!is.na(shape), shape != 'unknown') %>%
group_by(shape) %>%
summarise(n_sightings = n()) %>%
arrange(desc(n_sightings)) %>%
ggplot(aes(x = shape, y = n_sightings))+
geom_col(fill = "blue")+
labs(title = "Total Recorded UFO Sightings by Sighting Shape (1910 - 2014)",
x = "Shape",
y= "Number of Sightings")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#install.packages("shinythemes")
library(shinythemes)
library(shiny)
library(shinydashboard)
ufo2 <- mutate(ufo2, month=as.numeric(month))
month_order <- c("01", "02", "03", "04", "05", "06", "07",
"08", "09", "10", "11", "12")
ufo2$month_index <- month_order[ufo2$month]
ui <- dashboardPage(
dashboardHeader(title = "UFO Tracker"),
dashboardSidebar(disable = TRUE),
dashboardBody(
# Main content
fluidRow(
box(width = 3,
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
box(width = 8,
plotOutput("plot", width = "600px", height = "500px"))
)
)
)
# Define server logic
server <- function(input, output, session) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
if (nrow(filtered_data) == 0) {
# If no data found, display a message
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
# Otherwise, plot the data
ggplot(filtered_data, aes(x = month_index)) +
geom_bar(fill = "#43bfc7") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_linedraw()
}
})
session$onSessionEnded(stopApp)
}
# Start the app
shinyApp(ui, server)
