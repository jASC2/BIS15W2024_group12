} else {
ggplot(filtered_data, aes(x = time)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Alien Sightings by Time",
x = "Time",
y = "Frequency") +
theme_minimal()
}
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("Most Likely Alien Sightings"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c("", unique(ufo2$shape)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape
output$plot <- renderPlot({
req(input$shape)  # Require the shape input to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape)
if (nrow(filtered_data) == 0) {
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
ggplot(filtered_data, aes(x = longitude, y = latitude)) +
geom_point(alpha = 0.5, color = "blue") +
labs(title = paste("UFO Sightings for Shape:", input$shape),
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("Most Likely Alien Sightings"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c("", unique(ufo2$shape)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape
output$plot <- renderPlot({
req(input$shape)  # Require the shape input to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape)
if (nrow(filtered_data) == 0) {
plot(1, type = "n", axes = FALSE, xlab = "", ylab = "", main = "No data available")
} else {
ggplot(filtered_data, aes(x = longitude, y = latitude)) +
geom_point(alpha = 0.5, color = "blue") +
labs(title = paste("UFO Sightings for Shape:", input$shape),
x = "Longitude",
y = "Latitude") +
theme_minimal()
}
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c("", unique(ufo2$shape))),
selectInput("state", "Select State", choices = c("", unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
n_sightings <- nrow(filtered_data)
ggplot(data.frame(x = c("Number of Sightings"), y = c(n_sightings)), aes(x, y)) +
geom_col(fill = "skyblue", color = "black") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = NULL,
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
n_sightings <- nrow(filtered_data)
ggplot(data.frame(x = c("Number of Sightings"), y = c(n_sightings)), aes(x, y)) +
geom_col(fill = "skyblue", color = "black") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = NULL,
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
n_sightings <- nrow(filtered_data)
total_duration_seconds <- sum(filtered_data$duration_seconds)
ggplot(data.frame(x = c("Number of Sightings", "Total Duration (Seconds)"),
y = c(n_sightings, total_duration_seconds)), aes(x, y)) +
geom_col(fill = c("skyblue", "lightgreen"), color = "black") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = NULL,
y = "Value") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Finder"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
n_sightings <- nrow(filtered_data)
total_duration_seconds <- sum(filtered_data$duration_seconds)
ggplot(data.frame(x = c("Number of Sightings", "Total Duration (Seconds)"),
y = c(n_sightings, total_duration_seconds)), aes(x, y)) +
geom_col(fill = c("skyblue", "lightgreen"), color = "black") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = NULL,
y = "Value") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Finder"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c("", unique(ufo2$shape))),
selectInput("state", "Select State", choices = c("", unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state) %>%
mutate(month = factor(month, levels = month.name))  # Convert month to a factor with ordered levels
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state) %>%
mutate(month = factor(month, levels = month.name))  # Convert month to a factor with ordered levels
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c( unique(ufo2$shape))),
selectInput("state", "Select State", choices = c( unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
is.na(ufo2$month)
ui <- fluidPage(
# App title
headerPanel("UFO Sightings Analysis"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c( unique(ufo2$shape))),
selectInput("state", "Select State", choices = c( unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
ui <- fluidPage(
# App title
headerPanel("UFO Finder"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c( unique(ufo2$shape))),
selectInput("state", "Select State", choices = c( unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
library("naniar")
library("janitor")
library("ggmap")
library("dplyr")
library("RColorBrewer")
library("paletteer")
ufo <- readr::read_csv("ufo_data/complete.csv", na = c("", "unkown")) %>% clean_names
ufo2 <- ufo %>%
separate(datetime, into = c("month", "day","year"), sep="/") %>%
separate(year, into = c("year", "time"), sep = " ") %>%
select(-duration_hours_min, -comments, -date_posted) %>%
filter(country=="us", latitude!=0, longitude!=0,  !is.na(latitude), !is.na(longitude)) %>%
mutate(year=as.factor(year)) %>%
mutate(latitude=as.numeric(latitude)) %>%
mutate(longitude=as.numeric(longitude)) %>%
mutate(shape=as.factor(shape)) %>%
mutate(state=as.factor(state))
ufo2
ui <- fluidPage(
# App title
headerPanel("UFO Finder"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
library(shiny)
library(shinydashboard)
ui <- fluidPage(
# App title
headerPanel("UFO Finder"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
runApp('ufo_shinyapp.R')
runApp('ufo_shinyapp.R')
ui <- fluidPage(
# App title
headerPanel("UFO Finder", style = "font-family: 'Chewy', cursive; font-size: 24px;"),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c( unique(ufo2$shape))),
selectInput("state", "Select State", choices = c( unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
ui <- fluidPage(
# App title
tags$head(
tags$style(
HTML("
.title {
font-family: 'Chewy', cursive;
font-size: 24px;
}
"
)
),
),
headerPanel(
div(class = "title", "UFO Finder")
),
# Sidebar panel for inputs
sidebarPanel(
selectInput("shape", "Select UFO Shape", choices = c(unique(ufo2$shape))),
selectInput("state", "Select State", choices = c(unique(ufo2$state)))
),
# Main panel for displaying outputs
mainPanel(
plotOutput("plot")
)
)
# Define server logic
server <- function(input, output) {
# Render plot based on selected UFO shape and state
output$plot <- renderPlot({
req(input$shape, input$state)  # Require both inputs to be selected
filtered_data <- ufo2 %>%
filter(shape == input$shape & state == input$state)
ggplot(filtered_data, aes(x = month)) +
geom_bar(fill = "skyblue") +
labs(title = paste("UFO Sightings for Shape:", input$shape, "and State:", input$state),
x = "Month",
y = "Number of Sightings") +
theme_minimal()
})
}
# Start the app
shinyApp(ui, server)
